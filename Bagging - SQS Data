import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import BaggingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

df = pd.read_excel(r'D:\USER\Downloads\Study Quality Survey Results.xlsx')

feature_names = ['StudyDuration', 'ConsistencyofStudySessions', 'ReviewandRepetition',
                 'PreparationforClass', 'ReviewAfterClass', 'EffectiveStudyEnvironment',
                 'PaceofStudying', 'EngagementwithClassResources',
                 'ReadingBeyondCourseMaterials']
X = df[feature_names]
y = df['MidtermScore']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

bagging_model = BaggingRegressor(
    estimator=DecisionTreeRegressor(),
    n_estimators=10,
    random_state=42
)

bagging_model.fit(X_train_scaled, y_train)

stratified_kfold = StratifiedKFold(n_splits=5)
cv_scores = cross_val_score(bagging_model, X_train_scaled, y_train, cv=stratified_kfold, scoring='r2')

y_pred = bagging_model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Cross-validation scores: {cv_scores}")
print(f"Mean R-squared: {cv_scores.mean()}")
print(f"Standard Deviation of R-squared: {cv_scores.std()}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

input("Press Enter to close the program...")
