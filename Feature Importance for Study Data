import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.ensemble import RandomForestRegressor

file_path = 'D:\USER\Downloads\Student Study Data and Exam Scores.xlsx'
data = pd.read_excel(file_path)

features = data[['StudyQualitySurvey', 'TimeStudyingAfterMidterm', 'Frequencyaftermidterm']]
target = data['FinalScore']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [5, 10, None],
    'min_samples_split': [2, 5, 10],
}

rf_model = RandomForestRegressor(random_state=42)
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='r2')
grid_search.fit(X_train_scaled, y_train)

best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")

best_rf_model = grid_search.best_estimator_

predictions = best_rf_model.predict(X_test_scaled)

mse = mean_squared_error(y_test, predictions)
rmse = mean_squared_error(y_test, predictions, squared=False)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'Mean Absolute Error: {mae}')
print(f'R-squared: {r2}')

feature_importance = best_rf_model.feature_importances_

print("\nFeature Importances:")
for feature, importance in zip(features.columns, feature_importance):
    print(f'Feature: {feature}, Importance: {importance}')

input("Press Enter to exit...")
