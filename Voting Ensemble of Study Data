import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor
from sklearn.linear_model import Ridge, Lasso, ElasticNet
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

file_path = 'D:\\USER\\Downloads\\Student Study Data and Exam Scores.xlsx'
data = pd.read_excel(file_path)

features = data[['StudyQualitySurvey', 'TimeStudyingBeforeMidterm', 'Frequencybeforemidterm']]
target = data['MidtermScore']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

gbr = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
rfr = RandomForestRegressor(n_estimators=100, random_state=42)
ridge = Ridge(alpha=1.0)
lasso = Lasso(alpha=1.0)
elastic_net = ElasticNet(alpha=1.0, l1_ratio=0.5)

ensemble = VotingRegressor(estimators=[
    ('gb', gbr),
    ('rf', rfr),
    ('ridge', ridge),
    ('lasso', lasso),
    ('elastic_net', elastic_net)
])

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('regressor', ensemble)
])

param_distributions = {
    'regressor__gb__n_estimators': [100, 200],
    'regressor__gb__max_depth': [3, 5],
    'regressor__rf__n_estimators': [100, 200],
    'regressor__rf__max_depth': [3, 5],
    'regressor__ridge__alpha': [0.1, 1.0, 10.0],
    'regressor__lasso__alpha': [0.1, 1.0, 10.0],
    'regressor__elastic_net__alpha': [0.1, 1.0, 10.0],
    'regressor__elastic_net__l1_ratio': [0.3, 0.5, 0.7]
}

random_search = RandomizedSearchCV(pipeline, param_distributions, cv=5, scoring='r2', n_iter=10, random_state=42)
random_search.fit(X_train_scaled, y_train)

best_params = random_search.best_params_
print(f"Best parameters from RandomizedSearchCV: {best_params}")

pipeline.set_params(**random_search.best_params_)
pipeline.fit(X_train_scaled, y_train)

predictions = pipeline.predict(X_test_scaled)

mse = mean_squared_error(y_test, predictions)
rmse = mean_squared_error(y_test, predictions, squared=False)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'Mean Absolute Error: {mae}')
print(f'R-squared: {r2}')

fitted_gbr = pipeline.named_steps['regressor'].estimators_[0]
fitted_rfr = pipeline.named_steps['regressor'].estimators_[1]

if hasattr(fitted_gbr, 'feature_importances_') and hasattr(fitted_rfr, 'feature_importances_'):
    gb_importances = fitted_gbr.feature_importances_
    rf_importances = fitted_rfr.feature_importances_

    average_importances = (gb_importances + rf_importances) / 2

    print("\nFeature Importances:")
    for feature, importance in zip(features.columns, average_importances):
        print(f'Feature: {feature}, Importance: {importance}')

    plt.barh(features.columns, average_importances)
    plt.title("Feature Importance in Voting Ensemble")
    plt.xlabel("Importance")
    plt.show()

else:
    print("One of the models does not support feature importances.")

input("Press Enter to exit...")
